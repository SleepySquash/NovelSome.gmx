<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9998</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objGUI_dialogue_create();

needzoom=0; trAdded=0; if (global.noTrAdding) {trAdded=1; global.noTrAdding=0;}
alph=0; stopcount=0; stopcurrent=0; dialClear=1;
dialogueDrawing=0; roleDone=0; canPress=1;
timetoskip=0; dShowed=1; dialTNoFadeout=0;
timeVar=0; t=0; tdest=0; nowIsShowing=1;
audioPlaying=0; dest=0; fdelete=0;
isdialpos=0; dialposx=0; dialposy=0; dialwin=1;
_diposx_offs=0; dclrcnt=0;
alarm[1]=1;
lastOpacity=0;

fullSize=0;

global.dChoosen=-1;
global.curDiag=-1; rst=0; lastdiag=-1; diagcount=0;
// border vars
border_opacity = 0.9;
border_color1 = c_white;
border_color2 = c_black;

// panel
panel_init(sprDial_box,c_dkgray);

button[0] = ord('C');
mbutton[0] = mb_left;

max_opacity=1;
box_opacity=.0;

name_color=c_yellow;

//Some vars
dialog = "";
speaker = "";
txt = "";
txt_speed = 0;
diag = 0;
opacity=0;
choice=0;
chosen=0;
qts=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.dChoosen=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dialwin) {if (instance_exists(global.dialogBack)) {global.dialogBack.dest=1;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!global.inGame) { instance_destroy(); }
if (global.gamePause) {exit;}
if (dest) {exit;} if (instance_exists(global.dialogBack)) {global.dialogBack.nowIsShowing = nowIsShowing;}
if (!trAdded) {if (!is_question[diag]) {_act=""; if (speaker[diag]!="") {_act=speaker[diag]+": ";}
    trBack_add(_act+'"'+string(dialog[diag])+'"');} trAdded=1;}


/*if ((keyboard_check_pressed(vk_down) || (mouse_wheel_down() &amp;&amp; !objGUI_questblock.isUnderButton)) &amp;&amp; is_dialogue()) {
    keyboard_clear(vk_down);}
if ((keyboard_check_pressed(vk_up) || (mouse_wheel_up() &amp;&amp; !objGUI_questblock.isUnderButton)) &amp;&amp; is_dialogue()) {
    keyboard_clear(vk_up);}*/



_mpressed=0; if (mouse_check_button_pressed(mbutton[0])) {bfcanPress=canPress; cp=1; for (hi=0;hi&lt;instance_number(objHUD);hi+=1) {
    _hud=instance_find(objHUD,hi); if (_hud.hud!="" &amp;&amp; !_hud.hudHide) {for (i=0;i&lt;_hud.elCount[objHUD.elCPage];i+=1) {
        if (_hud.element[_hud.elCPage,i]=="mouse_pressed") {if (_hud.elmb[_hud.elCPage,i]==mb_right) {cp=0;}}}}}
    _mpressed=1; canPress=cp;} if (rst) {global.curDiag=-1; rst=0;}
if (lastdiag!=diag) {global.curDiag=diag; rst=1; lastdiag=diag;}
//if (global.isTyping) {typing_set(0);}
if (is_transfer[diag]!=-1) {diag=is_transfer[diag]; txt = ""; txt_speed = 0;}
if (is_question[diag]==0) {
    sw = string_length(dialog[diag]);
    if (string_length(txt) &lt; string_length(dialog[diag])) {clear=0; if (!global.dClickAction) {
        if (keyboard_check(button[0]) || mouse_check_button(mbutton[0])) &amp;&amp; !global.trBack &amp;&amp; !typing_are() &amp;&amp; window_has_focus() &amp;&amp; canPress &amp;&amp; nowIsShowing &amp;&amp; !global.mHUD {
            if (stopcurrent&lt;stopcount) {if (txt_speed&lt;istop[stopcurrent]) {clear=1;}} txt_speed += speed_press*Time.deltatime;
            if (stopcurrent&lt;stopcount) {if (txt_speed&gt;=istop[stopcurrent]) {
                if (clear) {keyboard_clear(button[0]); mouse_clear(mbutton[0]); txt_speed=istop[stopcurrent];} else {
                txt_speed=istop[stopcurrent]; clear=1; stopcurrent+=1;}}}} else {txt_speed += speed_normal*Time.deltatime;}} else {
            if (keyboard_check_pressed(button[0]) || mouse_check_button_pressed(mbutton[0])) &amp;&amp; !global.trBack &amp;&amp; !typing_are() &amp;&amp; window_has_focus() &amp;&amp; nowIsShowing &amp;&amp; canPress &amp;&amp; !global.mHUD {
            keyboard_clear(button[0]); mouse_clear(mbutton[0]);
            if (stopcurrent&lt;stopcount) {if (txt_speed&lt;istop[stopcurrent]) {clear=1;}} txt_speed += 100000;
            if (stopcurrent&lt;stopcount) {if (txt_speed&gt;=istop[stopcurrent]) {
                if (clear) {keyboard_clear(button[0]); mouse_clear(mbutton[0]); txt_speed=istop[stopcurrent];} else {
                txt_speed=istop[stopcurrent]; clear=1; stopcurrent+=1;}}}} else {txt_speed += speed_normal;}}
        if (stopcurrent&lt;stopcount) {if (txt_speed&gt;=istop[stopcurrent]) {txt_speed=istop[stopcurrent];}}
        if (txt_speed&gt;string_length(dialog[diag])) {txt_speed=string_length(dialog[diag]);} txt=string_copy(dialog[diag],0,floor(txt_speed));}
    if (!global.trBack &amp;&amp; !typing_are() &amp;&amp; window_has_focus() &amp;&amp; canPress &amp;&amp; nowIsShowing &amp;&amp; !global.mHUD) {if (string_length(txt) &gt;= string_length(dialog[diag]) &amp;&amp;
        (keyboard_check_pressed(button[0]) || mouse_check_button_pressed(mbutton[0]))) {
        if (!fullSize) {diag += 1; txt = ""; txt_speed = 0;} else {if (!roleDone) {if (instance_exists(novel)) {novel.waitingForComplete=0;} if (dialClear) {dialog_end();} roleDone=1;}}}}
} else if (is_question[diag]==1) {
    if (!global.trBack &amp;&amp; !typing_are() &amp;&amp; window_has_focus() &amp;&amp; canPress &amp;&amp; nowIsShowing &amp;&amp; !global.mHUD) {chosen+=((keyboard_check_pressed(vk_down))-(keyboard_check_pressed(vk_up)));
        chosen+=((keyboard_check_pressed(ord('S')))-(keyboard_check_pressed(ord('W'))));}
    if (chosen&lt;0) {chosen=choices[diag]-1;}
    if (chosen&gt;choices[diag]-1) {chosen=0;}
    if (!global.trBack &amp;&amp; !typing_are() &amp;&amp; window_has_focus() &amp;&amp; canPress &amp;&amp; nowIsShowing &amp;&amp; !global.mHUD) {if (keyboard_check_pressed(button[0])) {
        global.dChoosen=chosen; diag+=1;//diag=real(string_digits(string_copy(choice[diag,chosen],string_length(choice[diag,chosen])-3,3)));
        txt = ""; txt_speed = 0;}}}
if (exists[diag] == 0) {if (is_question[diag-1]) {for (i=0;i&lt;choices[diag-1];i+=1) {
        _a1="  "; _a2=""; if (global.dChoosen==i) {_a1="&lt;&lt;"; _a2="&gt;&gt;";} trBack_add("   "+_a1+"Choice ("+string(i)+"): "+string(choice[diag-1,i])+_a2);}}
    if (instance_exists(novel)) {novel.waitingForComplete=0;} dialog_end(); diag-=1;}
if (_mpressed) {canPress=bfcanPress;}
if (keyboard_check_pressed(vk_space)) {nowIsShowing=!nowIsShowing;}



timetoskip+=1;
if(keyboard_check_pressed(vk_enter) &amp;&amp; is_dialogue()) {
    keyboard_clear(vk_enter);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fontToDraw);
draw_set_valign(-1)
//if (fdelete) {if (alarm[0]=-1) {alarm[0]=1;}}
if (!fullSize) {rtext_offx=text_offx; rtext_offy=text_offy;
    if (global.dialOffFromCenter) {rtext_offx=view_wview/2+text_offx;}
    if (global.dialOffFromCenter) {rtext_offy=box_height-box_height/2+text_offy;}}
else {rtext_offx=ftext_offx; rtext_offy=ftext_offy;
    if (global.dialFOffFromCenter) {rtext_offx=view_wview/2+ftext_offx;}
    if (global.dialFOffFromCenter) {rtext_offy=view_hview/2+ftext_offy;}}

// Raise the opacity slowly
if (tdest) {if (opacity&gt;0) {if (!dialTNoFadeout) {opacity-=box_opacity_gain*Time.deltatime;} else {opacity=0;}} else {instance_destroy();}} else {
    if (nowIsShowing) {if (dShowed) {if (opacity&lt;max_opacity) {opacity+=box_opacity_gain*Time.deltatime;}} else {if (opacity&gt;0) {opacity-=box_opacity_gain*Time.deltatime;}}}
    else {if (opacity&gt;0) {opacity-=box_opacity_gain*Time.deltatime;}}}
draw_set_alpha(opacity-box_opacity)

//panel_draw(view_xview+box_offx,view_yview+view_hview-box_offy-box_height,view_xview+view_wview-box_offx,view_yview+view_hview-box_offy)
// TEXT BOX BORDER
draw_set_alpha(opacity);
if is_question[diag]=0
{
    draw_set_alpha(opacity-box_opacity)
    
    // NAME BOX
    if is_string(speaker[diag])
    {
    if speaker[diag] != ""
    {
        //draw_roundrect_color(view_xview+box_offx,view_yview+view_hview-box_offy-box_height-name_off,view_xview+box_offx+name_width,view_yview+view_hview-box_offy-box_height-name_off-name_height,box_color,box_color,0)
        //uoffx=0; //if (instance_exists(conn)) {if (speaker[diag]==conn.name) {uoffx=view_wview-box_offx*2-name_width;}}
        //panel_draw(view_xview+box_offx+uoffx,view_yview+view_hview-box_offy-box_height-name_off-name_height,view_xview+box_offx+name_width+uoffx,view_yview+view_hview-box_offy-box_height-name_off)
    }
    }
    draw_set_alpha(opacity)
    
    // NAME BOX BORDER
    //if speaker[diag] != ""
    {
        //draw_roundrect_color(view_xview+box_offx,view_yview+view_hview-box_offy-box_height-name_off-1,view_xview+box_offx+name_width,view_yview+view_hview-box_offy-box_height-name_off-name_height,border_color1,border_color1,1)
        //draw_roundrect_color(view_xview+box_offx-1,view_yview+view_hview-box_offy-box_height-name_off,view_xview+box_offx+name_width+1,view_yview+view_hview-box_offy-box_height-name_off-name_height-1,border_color2,border_color2,1)
    }
    
    // NAME
    if opacity &gt;= max_opacity/2 {if (speaker[diag] != "") {if (diag==0) {
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle) draw_set_alpha(1*(opacity/max_opacity));
        uoffx=0; //if (instance_exists(conn)) {if (speaker[diag]==conn.name) {uoffx=view_wview-box_offx*2-name_width;}}
        crnamewidth=name_width; if (string_width(speaker[diag])+16&gt;name_width) {crnamewidth=string_width(speaker[diag])+16;}
        crnameheight=name_height; if (string_height(speaker[diag])+4&gt;name_height) {crnameheight=string_height(speaker[diag])+4;}
        if (isdialpos) {_xp=dialposx-string_width(dialog[diag])/2-rtext_offx+nbox_offx+crnamewidth/2; _yp=dialposy-name_off-(crnameheight*.5);}
        else {_xp=box_offx+nbox_offx+rtext_offx+(crnamewidth*.5); _yp=view_hview-box_offy-box_height-name_off-(crnameheight*.5);}
        if (global.dialNTextOl) {draw_text_outline_ext(view_xview+_xp,view_yview+_yp,speaker[diag],actorclr[diag],actoroutclr[diag]);}
        else {draw_set_colour(actorclr[diag]); draw_text(view_xview+_xp,view_yview+_yp,speaker[diag]);}}}}

    // TEXT
    if opacity &gt;= max_opacity/2
    {
        draw_set_halign(-1)
        draw_set_valign(-1) draw_set_alpha(1*(opacity/max_opacity));
        if (isdialpos) {_xp=dialposx-string_width(dialog[diag])/2; _yp=dialposy;} else {if (!fullSize) {
            _xp=box_offx+rtext_offx; _yp=view_hview-box_offy-box_height+rtext_offy;} else {_xp=fbox_offx+rtext_offx; _yp=fbox_offy+rtext_offy;}}
        txtdr=1; if (dclrcnt[diag]&gt;0) {txtdr=dtextself[diag];} if (!fullSize) {_box_offx=box_offx;} else {_box_offx=fbox_offx;} textwidth=window_get_width()-(_box_offx*2+rtext_offx*2);
        if (global.dialTextWidth!=0) {textwidth=global.dialTextWidth;}
        if (txtdr) {if (global.dialTextOl) {draw_text_ext_outline(txt,view_xview+_xp,view_yview+_yp,text_sep,textwidth,text_color,text_ocolor);}
            else {draw_set_colour(text_color); draw_text_ext(view_xview+_xp,view_yview+_yp,txt,text_sep,textwidth);}}
        if (dclrcnt[diag]&gt;0) {for (crclr=0;crclr&lt;dclrcnt[diag];crclr+=1) {for (sn=1;sn&lt;string_length(txt);sn+=1) {if (sn==dclrstart[diag,crclr]) {
            if (dclrend[diag,crclr]==0) {draw_text_ext_outline(string_copy(txt,sn,string_length(txt)+1-sn),view_xview+string_width(string_copy(txt,1,sn-1))+_xp,view_yview+_yp,text_sep,textwidth,dclrself[diag,crclr],text_ocolor);
            } else {draw_text_ext_outline(string_copy(txt,sn,dclrend[diag,crclr]),view_xview+string_width(string_copy(txt,1,sn-1))+_xp,view_yview+_yp,text_sep,textwidth,dclrself[diag,crclr],text_ocolor);}
            //draw_text_ext_outline(string_copy(txt,sn,string_length(txt)+1-sn),view_xview+string_width(string_copy(txt,1,sn-1))+_xp,view_yview+_yp,text_sep,window_get_width()-(box_offx*2+text_offx*2),dclrself[diag,crclr],c_black);
            //draw_text_ext_colour(view_xview+string_width(string_copy(txt,1,sn-1))+_xp,view_yview+_yp,string_copy(txt,sn,string_length(txt)+1-sn),text_sep,window_get_width()-(box_offx*2+text_offx*2),dclrself[diag,crclr],dclrself[diag,crclr],dclrself[diag,crclr],dclrself[diag,crclr],1);
            }}}}}

    // BALLOON
    /*if opacity &gt;= max_opacity/2 and actor[diag] != noone {
        ind = actor[diag].sprite_index
        sprite_get_width(ind)
        ind_height = sprite_get_height(ind)*actor[diag].image_yscale;
        draw_sprite(sprEntity_talk,0,actor[diag].x,actor[diag].y-(ind_height+5)) }*/
} else if (is_question[diag]) {
    if (opacity &gt;= max_opacity/2) {
        if (qutype[diag]==0) {draw_set_halign(-1);
            for (i=0; i&lt;choices[diag]; i+=1) {draw_set_alpha(1*(opacity/max_opacity));
                if (choice[diag,i]!="") {if (cursor_under_button(view_xview+box_offx+rtext_offx+string_width(choice[diag,i])/2,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3))+string_height(choice[diag,i])/2,string_width(choice[diag,i]),
                    string_height(choice[diag,i])-4) &amp;&amp; !global.trBack &amp;&amp; !global.gamePause &amp;&amp; window_has_focus() &amp;&amp; !typing_are()) {chosen=i; if (mouse_check_button_pressed(mb_left) &amp;&amp; !dest) {diag+=1; txt = ""; txt_speed = 0; global.dChoosen=chosen; mouse_clear(mb_left); exit;}}}
                __clr=text_color; if (chosen==i) {__clr=question_color;}
                if (global.dialTextOl) {draw_text_outline_ext(view_xview+box_offx+rtext_offx,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3)),choice[diag,i],__clr,c_black);} else {
                draw_set_colour(__clr); draw_text(view_xview+box_offx+rtext_offx,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3)),choice[diag,i]);}}
        } else if (qutype[diag]==1) {draw_set_halign(fa_center); foffs=-(choices[diag]*(text_sep+3))/2;
            for (i=0; i&lt;choices[diag]; i+=1) {draw_set_alpha(1*(opacity/max_opacity));
                if (choice[diag,i]!="") {if (cursor_under_button(view_xview+view_wview/2,view_yview+view_hview/2+foffs+(i*(text_sep+3))+string_height(choice[diag,i])/2,string_width(choice[diag,i]),
                    string_height(choice[diag,i])-4) &amp;&amp; !global.trBack &amp;&amp; !global.gamePause &amp;&amp; window_has_focus() &amp;&amp; !typing_are()) {chosen=i; if (mouse_check_button_pressed(mb_left) &amp;&amp; !dest) {diag+=1; txt = ""; txt_speed = 0; global.dChoosen=chosen; mouse_clear(mb_left); exit;}}}
                __clr=text_color; if (chosen==i) {__clr=question_color;}
                if (global.dialTextOl) {draw_text_outline_ext(view_xview+view_wview/2,view_yview+view_hview/2+foffs+(i*(text_sep+3)),choice[diag,i],__clr,c_black);} else {
                draw_set_colour(__clr); draw_text(view_xview+view_wview/2,view_yview+view_hview/2+foffs+(i*(text_sep+3)),choice[diag,i]);}}
        } else if (qutype[diag]==2) {draw_set_halign(fa_center);
            for (i=0; i&lt;choices[diag]; i+=1) {draw_set_alpha(1*(opacity/max_opacity));
                if (choice[diag,i]!="") {if (cursor_under_button(view_xview+view_wview/2,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3))+string_height(choice[diag,i])/2,string_width(choice[diag,i]),
                    string_height(choice[diag,i])-4) &amp;&amp; !global.trBack &amp;&amp; !global.gamePause &amp;&amp; window_has_focus() &amp;&amp; !typing_are()) {chosen=i; if (mouse_check_button_pressed(mb_left) &amp;&amp; !dest) {diag+=1; txt = ""; txt_speed = 0; global.dChoosen=chosen; mouse_clear(mb_left); exit;}}}
                __clr=text_color; if (chosen==i) {__clr=question_color;}
                if (global.dialTextOl) {draw_text_outline_ext(view_xview+view_wview/2,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3)),choice[diag,i],__clr,c_black);} else {
                draw_set_colour(__clr); draw_text(view_xview+view_wview/2,view_yview+view_hview-box_offy-box_height+rtext_offy+(i*(text_sep+3)),choice[diag,i]);}}
        }}}

if (dest) {if (t&lt;1) {t+=1*Time.deltatime;} else {tdest=1;}} draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
