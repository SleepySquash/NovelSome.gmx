<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chat_init('',12,12,view_wview-8,view_hview-24*3.4,34,7,view_hview-24*2,c_black,38,200); tab=1;
lncount=0; lastkstring=""; smNew=0; notNot=0; global.smNew=0; unTabs=0;
notT=2; notAlpha=0; notTime=0; frM=""; alphaOn=0; mbx=0; mby=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (typing_is()) {if (string_width(keyboard_string) &gt; chat_x2) {keyboard_string = string_copy(keyboard_string,1,string_length(keyboard_string)-1);}
if (string_length(keyboard_string) &gt; chat_bar_chars) {keyboard_string = string_copy(keyboard_string,1,chat_bar_chars);}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!typing_are() &amp;&amp; global.selChatTab==tab) {if (!global.trBack) {//if (keyboard_check_pressed(vk_insert)) {typing_set(id); chat_togglebar(); keyboard_clear(vk_insert);}
    if (keyboard_check_pressed(vk_enter) &amp;&amp; global.chat_open) {chat_togglebar(); keyboard_clear(vk_enter);}}
else {if (global.chat_open &amp;&amp; typing_is()) {typing_set(0);}}
if (global.chat_open) {if (keyboard_check_pressed(vk_escape)) {global.chat_open = !global.chat_open; typing_set(0); keyboard_string = "";}
if (mouse_check_button_pressed(mb_right) &amp;&amp; !objChat.unTabs) {global.chat_open = !global.chat_open; typing_set(0); mouse_clear(mb_right); keyboard_string = "";}}}
if (!global.chat_open &amp;&amp; !global.trBack) {if (global.selChatTab==tab) {if (keyboard_check_pressed(vk_enter)) {typing_set(id); chat_togglebar();}
    if (room!=room_editor) {if (mouse_check_button_pressed(mb_middle)) {typing_set(id); chat_togglebar(); global.selChatTab=tab;}} else {
        if (objEditor.etype==1 &amp;&amp; (objEditor.tabSelected==0 || objEditor.tabSelected==5)) {
        if (mouse_check_button_pressed(mb_middle)) {mbx=mouse_x; mby=mouse_y;} if (mouse_check_button_released(mb_middle)) {
            if (mbx==mouse_x &amp;&amp; mby==mouse_y) {typing_set(id); chat_togglebar(); global.selChatTab=tab;}}} else {
            if (mouse_check_button_pressed(mb_middle)) {typing_set(id); chat_togglebar(); global.selChatTab=tab;}}}}}
/*if (objGUI_console.isActive) {
    global.chat_open = 0;
    if (typing_is()) {
        keyboard_string = "";
        typing_set(0);}}*/

if (global.selChatTab&gt;=1 &amp;&amp; alphaOn) {chat_alphasystem();}

if (!global.chat_open &amp;&amp; typing_is()) {typing_set(0);}

if (global.chat_open &amp;&amp; typing_is()) {if (!global.loggedIn) {keyboard_string="";}//isCaps=keyboard_check_direct(vk_lshift);
if (keyboard_check_pressed(vk_anykey)) {if (keyboard_lastkey==8) {lastkstring=keyboard_string;}}
if (typing_is()) {if (keyboard_check_pressed(vk_anykey)) {
    if (char_available_to_write(keyboard_lastchar)) {
    if (lastkstring!=keyboard_string) {keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1)+string(keyboard_lastchar); keyboard_lastchar="";}
    else {keyboard_string+=string(keyboard_lastchar); keyboard_lastchar="";} lastkstring=keyboard_string;}
}} else {lastkstring=keyboard_string;}
/*if (typing_is()) {if (keyboard_check_pressed(vk_anykey)) {
    if (char_available_to_write(keyboard_lastchar)) {keyboard_string+=string(keyboard_lastchar);
    keyboard_lastchar=""; lastkstring=keyboard_string;} else if (keyboard_lastkey==8) {
        keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1);}
}} else {lastkstring=keyboard_string;}*/
/*if (keyboard_check_pressed(vk_anykey)) {
    if (char_available_to_write(keyboard_lastchar)) {
    if (lastkstring!=keyboard_string) {keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1)+string(keyboard_lastchar); keyboard_lastchar="";}
    else {keyboard_string+=string(keyboard_lastchar); keyboard_lastchar="";} lastkstring=keyboard_string;} else if (keyboard_lastkey==8) {
        keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1);}
}} else {lastkstring=keyboard_string;}*/
/*if (typing_is()) {if (keyboard_check_pressed(vk_anykey)) {if (isCaps) {
    _key=string_copy(keyboard_string,string_length(keyboard_string),1); notcen_add('','_key: '+string(_key)+"; lastchar: "+string(keyboard_lastchar));//key=keyboard_get_upper();
    keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1)+_key;}}}*/
if (keyboard_check_pressed(vk_up)) {
    if (chat_line[chat_totallines+lncount-1]!='') {
        lncount-=1; if (string_char_at(chat_line[chat_totallines+lncount],1)=="(") {
            isendtoo=(string_char_at(chat_line[chat_totallines+lncount],string_length(chat_line[chat_totallines+lncount]))==")");
            if (isendtoo) {keyboard_string=string_copy(chat_line[chat_totallines+lncount],2,string_length(chat_line[chat_totallines+lncount])-2);}else{
            keyboard_string=string_copy(chat_line[chat_totallines+lncount],2,string_length(chat_line[chat_totallines+lncount])-1);}} else {
            keyboard_string=chat_line[chat_totallines+lncount];}} keyboard_clear(vk_up);}
if (keyboard_check_pressed(vk_down)) {
    if ((chat_totallines+lncount+1)&lt;chat_totallines) {
        lncount+=1; if (string_char_at(chat_line[chat_totallines+lncount],1)=="(") {
            isendtoo=(string_char_at(chat_line[chat_totallines+lncount],string_length(chat_line[chat_totallines+lncount]))==")");
            if (isendtoo) {keyboard_string=string_copy(chat_line[chat_totallines+lncount],2,string_length(chat_line[chat_totallines+lncount])-2);}else{
            keyboard_string=string_copy(chat_line[chat_totallines+lncount],2,string_length(chat_line[chat_totallines+lncount])-1);}} else {
            keyboard_string=chat_line[chat_totallines+lncount];}}else{keyboard_string="";} keyboard_clear(vk_down);}
if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('V')) &amp;&amp; clipboard_has_text()) {keyboard_string += clipboard_get_text();}
if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('C'))) {clipboard_set_text(keyboard_string);}}else{lastkstring=keyboard_string; lncount=0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.selChatTab&gt;=1) {chat_draw(); if (!global.loggedIn) {}} unTabs=0;
if (global.chat_open) {draw_text_set(Neucha18,c_white,fa_left,fa_top); button_set_clickble(1);
    _clr=c_white; _oclr=c_dkgray; if (objGUI_chat.smNew) {_clr=c_orange;}
    if (global.selChatTab==0) {if (objGUI_chat.smNew) {objGUI_chat.smNew=0;} _clr=c_lime; _oclr=c_black;} draw_text_set(Neucha18,c_white,fa_left,fa_top);
    if (cursor_under_button(view_xview+60,view_yview+chat_y2+15,string_width(lang.console),string_height("A"))) {
        unTabs=1; draw_text_outline(mouse_x+15,mouse_y+10,lang.notifications_from_this_tab+" "+stringGetSwitch(!objGUI_chat.notNot));
        if (mouse_check_button_pressed(mb_right)) {objGUI_chat.notNot=!objGUI_chat.notNot; mouse_clear(mb_right);}}
    if (button_outbackfix(view_xview+60,view_yview+chat_y2+15,lang.console,_clr,_oclr,c_black)) {
        if (global.selChatTab!=0) {typing_set(0); typing_set(objGUI_chat.id); global.selChatTab=0;}}
    _clr=c_white; _oclr=c_dkgray; if (objChat.smNew) {_clr=c_orange;}
    if (global.selChatTab==1) {if (objChat.smNew) {objChat.smNew=0;} _clr=c_lime; _oclr=c_black;} draw_text_set(Neucha18,c_white,fa_left,fa_top);
    if (cursor_under_button(view_xview+60+string_width(lang.console),view_yview+chat_y2+15,string_width(lang.chat),string_height("A"))) {
        unTabs=1; draw_text_outline(mouse_x+15,mouse_y+10,lang.notifications_from_this_tab+" "+stringGetSwitch(!objChat.notNot));
        if (mouse_check_button_pressed(mb_right)) {objChat.notNot=!objChat.notNot; mouse_clear(mb_right);}}
    if (button_outbackfix(view_xview+60+string_width(lang.console),view_yview+chat_y2+15,lang.chat,_clr,_oclr,c_black)) {
        if (global.selChatTab!=1) {typing_set(0); typing_set(id); global.selChatTab=1;}}}
draw_set_alpha(notAlpha); if (!global.chat_open) {if ((!objGUI_chat.smNew || (objGUI_chat.smNew &amp;&amp; objGUI_chat.notNot))
        &amp;&amp; (!objChat.smNew || (objChat.smNew &amp;&amp; objChat.notNot))) {global.smNew=0;} if (global.smNew) {
    draw_text_set(Neucha18,c_white,fa_left,fa_bottom); if (notT==0) {if (notAlpha&lt;1) {notAlpha+=0.1;} else {notT=1;}}
    if (notT==1) {if (notTime&lt;85) {notTime+=1;} else {notTime=0; notT=2;}} if (notT==2) {if (notAlpha&gt;0) {notAlpha-=0.1;}}
    _adstr=lang.new_message; if (frM!="") {_adstr=lang.new_message_from+" "+string(frM);}
    draw_text_outline_ext(view_xview+10,view_yview+view_hview-5,_adstr+"!",c_orange,c_dkgray);} else {
    frM=""; notT=2; notAlpha=0; notTime=0;}} else {frM=""; notT=2; notAlpha=0; notTime=0;} draw_set_alpha(1);
//draw_text_outline(view_xview+100,view_yview+view_hview-300,"["+string(keyboard_string)+"]");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
