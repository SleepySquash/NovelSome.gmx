<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type=0; z=0; texture=-1; rotx=0; roty=0; rotz=0; isSolid=0; collision=noone;
x1=0; x2=0; y1=0; y2=0; z1=0; z2=0; lookAtCamera=0; alarm[0]=1; doAnimationOfJ_f=0;
sclx=1; scly=1; sclz=1; isUsable=0; action=-1; doAnimationOfJ=0; followCamera=1; refvalue=-1;
lookAt=noone; imp=0; chid=-1; onvarName="obj 3dobject"; acount=0; isFTime=1; ifs=-1;
real_wview = global.wSW; real_hview = global.wSH; xscale=1; yscale=1; xoff=0; yoff=0; alphatest=1;
posx=0; _extyy=0; cuposx=0; cuposy=0; cuscale=1; xrev=1; yrev=1; dox=0; doy=0; indxoff[0]=0; indyoff[0]=0;
bnum=-1; initidepth=0; aimage[0]=-1; image=-1; sscale[0]=1; interpolation[0]=global.isInterpolation;
hrepeat=1; vrepeat=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(collision)) {with (collision) {instance_destroy();}}
for (i=0;i&lt;acount;i+=1) {if (sprite_exists(aimage[i])) {sprite_delete(aimage[i]);}}
if (sprite_exists(image)) {sprite_delete(image);}
if (ds_exists(action,ds_type_list)) {ds_list_destroy(action);}
if (ds_exists(ifs,ds_type_list)) {ds_list_destroy(ifs);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isSolid) {collision = instance_create(x,y,par_wall); collision.z = z; collision.owner = id;}
if (type == 7) {if (imp) {_scale=image_yscale*sclz*yrev*cuscale*yscale*sscale[0]; texture = aimage[0];}
        else {_scale=image_yscale*sclz*yrev*cuscale*yscale; texture = image;}
    if (sprite_exists(texture)) {z += ((sprite_get_height(texture)-sprite_get_yoffset(texture))*_scale-(sprite_get_height(texture)-sprite_get_bbox_bottom(texture))*_scale);}}
//d3dobject_alarm0();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.is3DHide) {if (instance_exists(lookAt)) {rotz = point_direction(x,y,lookAt.x,lookAt.y)+90;}}
if (doAnimationOfJ) {if (doAnimationOfJ_f!=0) {z+=_zspd*1.2*Time.deltatime*2; _zspd-=1.3*Time.deltatime*2;}
if (doAnimationOfJ_f==0) {_zspd = 0; _z = z; doAnimationOfJ_f=1;}
else if (doAnimationOfJ_f == 1) {_zspd=15; doAnimationOfJ_f=2;}
else if (doAnimationOfJ_f == 2) {if (z&lt;_z) {z=_z; _zspd=10; doAnimationOfJ_f=3;}}
else if (doAnimationOfJ_f == 3) {if (z&lt;_z) {z=_z; _zspd=5; doAnimationOfJ_f=4;}}
else if (doAnimationOfJ_f == 4) {if (z&lt;_z) {z=_z; _zspd=0; doAnimationOfJ_f=0;
    doAnimationOfJ=0;}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(collision)) {with (collision) {instance_destroy();}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(obj3DCamera)) {exit;} if (global.is3DHide) {exit;}
d3d_start(); draw_set_colour(c_white); //draw_set_alpha_test(1); draw_set_alpha_test_ref_value(35);
//draw_set_blend_mode(bm_normal); image_alpha = obj3DCamera.alpha; draw_set_alpha(obj3DCamera.alpha);
draw_set_alpha_test(alphatest); if (refvalue==-1) {draw_set_alpha_test_ref_value(global.alphaRefValue);} else {draw_set_alpha_test_ref_value(refvalue);}
image_alpha = 1; draw_set_alpha(1);

if (type == 1) {texture_set_interpolation(global.isInterpolation);
    if (sprite_exists(texture)) {_draw=sprite_get_texture(texture,0);} else {_draw=sprite_get_texture(sprNoTexture,0);}
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(rotx);
    d3d_transform_add_rotation_y(roty);
    d3d_transform_add_rotation_z(rotz);
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_floor(x1, y1, z1, x2, y2, z2, _draw, hrepeat, vrepeat);
    d3d_draw_floor(x2, y1, z1, x1, y2, z2, _draw, hrepeat, vrepeat);
    d3d_transform_set_identity();}
if (type == 2) {if (sprite_exists(texture)) {_draw=sprite_get_texture(texture,0);} else {_draw=sprite_get_texture(sprNoTexture,0);}
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(rotx);
    d3d_transform_add_rotation_y(roty);
    d3d_transform_add_rotation_z(rotz);
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_wall(x1, y1, z1, x2, y2, z2, _draw, hrepeat, vrepeat);
    d3d_draw_wall(x2, y1, z2, x1, y2, z1, _draw, hrepeat, vrepeat);
    d3d_transform_set_identity();}
if (type == 3) {if (sprite_exists(texture)) {_draw=sprite_get_texture(texture,0);} else {_draw=sprite_get_texture(sprNoTexture,0);}
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(rotx);
    d3d_transform_add_rotation_y(roty);
    d3d_transform_add_rotation_z(rotz);
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_block(x1, y1, z1, x2, y2, z2, _draw, hrepeat, vrepeat);
    d3d_transform_set_identity();}
if (type == 5) {if (sprite_exists(texture)) {_draw=sprite_get_texture(texture,0);} else {_draw=sprite_get_texture(sprNoTexture,0);}
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(rotx);
    d3d_transform_add_rotation_y(roty);
    d3d_transform_add_rotation_z(rotz);
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_ellipsoid(x1, y1, z1, x2, y2, z2, _draw, hrepeat, vrepeat, 24);
    d3d_transform_set_identity();}
if (type == 7) {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90+rotx);
    d3d_transform_add_rotation_y(roty);
    if (lookAtCamera) {d3d_transform_add_rotation_z(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90);}
    else {d3d_transform_add_rotation_z(rotz);}
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z); if (imp) {texture = aimage[0];} else {texture=image;}
    if (sprite_exists(texture)) {if (!imp) {draw_sprite_ext(texture,-1,0,0,xrev*cuscale*xscale,yrev*cuscale*yscale,0,c_white,image_alpha);}
        else {for (i=0;i&lt;acount;i+=1) {if (sprite_exists(aimage[i])) {texture_set_interpolation(interpolation[i]);
                draw_sprite_ext(aimage[i],-1,posx+cuposx+xoff+dox+indxoff[i],cuposy+yoff+doy+_extyy+indyoff[i],xrev*cuscale*xscale*sscale[i],yrev*cuscale*yscale*sscale[i],0,c_white,image_alpha);}}
                //draw_sprite_ext(aimage[i],0,0,0,1,1,0,c_white,image_alpha);}}
                texture_set_interpolation(global.isInterpolation);}
        if (isUsable) {_canMove=1; if (instance_exists(objPlayer)) {_canMove = objPlayer.canMove;}
            if (!global.gamePause &amp;&amp; !instance_exists(objGUI_dialogue) &amp;&amp; !global.trBack &amp;&amp; !global.chat_open &amp;&amp; obj3DCamera.canView &amp;&amp; _canMove) {if (obj3DCamera.moveMouse) {
            if (((obj3DCamera.direction-(((mouse_x-view_wview/2)*mystical_constant())/5)) &gt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)
-(sprite_get_bbox_width(texture)/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*37)/2
&amp;&amp; (obj3DCamera.direction-(((mouse_x-view_wview/2)*mystical_constant())/5)) &lt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)
+(sprite_get_bbox_width(texture)/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*37)/2)
&amp;&amp; ((obj3DCamera.pitch-(((mouse_y-view_hview/2)*mystical_constant2())/5)) &gt; -point_direction(0,obj3DCamera.z+obj3DCamera._lookfromz,point_distance(x,y,obj3DCamera.x,obj3DCamera.y),z)
+((sprite_get_yoffset(texture)-(sprite_get_bbox_bottom(texture)-sprite_get_bbox_top(texture)))/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*87)/2
&amp;&amp; (obj3DCamera.pitch-(((mouse_y-view_hview/2)*mystical_constant2())/5)) &lt; -point_direction(0,obj3DCamera.z+obj3DCamera._lookfromz,point_distance(x,y,obj3DCamera.x,obj3DCamera.y),z)
-((sprite_get_yoffset(texture)-(sprite_get_bbox_bottom(texture)-sprite_get_bbox_top(texture)))/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*87)/2)) {
                if (!doAnimationOfJ) {gameDebug.drawDoCursorInpos=1; gameDebug.drawDoCursor=1;}
                if (mouse_check_button_pressed(mb_left)) {doAnimationOfJ=1; d3d_do_action();}}}
            else {_yyscale=(yrev*cuscale*yscale*sscale[0]*sclz); __avheight=sprite_get_bbox_height(texture)/8*_yyscale;
            _xxscale=(cuscale*xscale*sscale[0]*sclx); __avwidth=sprite_get_bbox_width(texture)*1.23*_xxscale;
            if (collision_rectangle(x-__avwidth,y-__avwidth,x+__avwidth,y+__avwidth,obj3DCamera,0,1)
                &amp;&amp; obj3DCamera.z &gt; z-(sprite_get_bbox_height(texture)*_yyscale)/2-__avheight/2
                &amp;&amp; obj3DCamera.z &lt; z+(sprite_get_bbox_height(texture)*_yyscale)/2+__avheight
            /*point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)&lt;sprite_get_bbox_width(texture)*1.5*sclx*/) {
            if (obj3DCamera.direction &gt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)-60 &amp;&amp; obj3DCamera.direction &lt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)+60) {
                if (!doAnimationOfJ) {gameDebug.drawDoCursorInpos=0; gameDebug.drawDoCursor=1;}
                if (mouse_check_button_pressed(mb_left)) {doAnimationOfJ=1; d3d_do_action();}}}}}}}
    else {draw_sprite_ext(sprNoTexture,0,0,0,image_xscale*4,image_yscale*4,0,c_white,image_alpha);}
    if (!lookAtCamera) {//d3d_transform_add_rotation_z(180);
        if (sprite_exists(texture)) {if (!imp) {draw_sprite_ext(texture,-1,0,0,-1,1,0,c_black,image_alpha);}
        else {if (image_alpha&gt;0) {for (i=0;i&lt;acount;i+=1) {if (sprite_exists(aimage[i])) {texture_set_interpolation(interpolation[i]);
            draw_sprite_ext(aimage[i],-1,posx+cuposx+xoff+dox+indxoff[i],cuposy+yoff+doy+_extyy+indyoff[i],-1*xrev*cuscale*xscale*sscale[i],yrev*cuscale*yscale*sscale[i],0,c_black,image_alpha);}}}
            texture_set_interpolation(global.isInterpolation);}}
        else {draw_sprite_ext(sprNoTexture,-1,0,0,-4*image_xscale,4*image_yscale,0,c_white,image_alpha);}}
    d3d_transform_set_identity();}
if (type == 8) {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90+rotx);
    d3d_transform_add_rotation_y(roty);
    if (lookAtCamera) {d3d_transform_add_rotation_z(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90);}
    else {d3d_transform_add_rotation_z(rotz);}
    d3d_transform_add_scaling(sclx,scly,sclz);
    d3d_transform_add_translation(x, y, z);
    if (sprite_exists(texture)) {draw_sprite(texture,0,0,0);
        if (isUsable) {_canMove=1; if (instance_exists(objPlayer)) {_canMove = objPlayer.canMove;}
            if (!global.gamePause &amp;&amp; !instance_exists(objGUI_dialogue) &amp;&amp; !global.trBack &amp;&amp; !global.chat_open &amp;&amp; obj3DCamera.canView &amp;&amp; _canMove) {if (obj3DCamera.moveMouse) {
            if (((obj3DCamera.direction-(((mouse_x-view_wview/2)*mystical_constant())/5)) &gt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)
-(sprite_get_bbox_width(texture)/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*37)/2
&amp;&amp; (obj3DCamera.direction-(((mouse_x-view_wview/2)*mystical_constant())/5)) &lt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)
+(sprite_get_bbox_width(texture)/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*37)/2)
&amp;&amp; ((obj3DCamera.pitch-(((mouse_y-view_hview/2)*mystical_constant2())/5)) &gt; -point_direction(0,obj3DCamera.z+obj3DCamera._lookfromz,point_distance(x,y,obj3DCamera.x,obj3DCamera.y),z)
+((sprite_get_yoffset(texture)-(sprite_get_bbox_bottom(texture)-sprite_get_bbox_top(texture)))/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*87)/2
&amp;&amp; (obj3DCamera.pitch-(((mouse_y-view_hview/2)*mystical_constant2())/5)) &lt; -point_direction(0,obj3DCamera.z+obj3DCamera._lookfromz,point_distance(x,y,obj3DCamera.x,obj3DCamera.y),z)
-((sprite_get_yoffset(texture)-(sprite_get_bbox_bottom(texture)-sprite_get_bbox_top(texture)))/point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)*87)/2)) {
                /*________________________________СЗАДИ БЕЛАЯ ТЕНЬ:
                if (!lookAtCamera) {d3d_transform_add_rotation_z(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90);}
                d3d_set_fog(1,c_white,0,0); d3d_transform_add_translation(lengthdir_x(100,point_direction(obj3DCamera.x,obj3DCamera.y,x,y)),lengthdir_y(100,point_direction(obj3DCamera.x,obj3DCamera.y,x,y)),0);
                draw_sprite_ext(texture,0,0,0,1.1,1.1,0,c_black,image_alpha);
                d3d_set_fog(0,c_black,0,0); d3d_transform_add_translation(-lengthdir_x(100,point_direction(obj3DCamera.x,obj3DCamera.y,x,y)),-lengthdir_y(100,point_direction(obj3DCamera.x,obj3DCamera.y,x,y)),0);
                if (!lookAtCamera) {d3d_transform_add_rotation_z(-(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90));}*/
                /*________________________________КРУЖОЧЕК:
                if (!lookAtCamera) {d3d_transform_add_rotation_z(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90);}
                if (sprite_get_bbox_width(texture)&gt;sprite_get_bbox_height(texture)) {__scale = sprite_get_bbox_height(texture)/sprite_get_bbox_height(sprite6)*0.7;}
                    else {__scale = sprite_get_bbox_width(texture)/sprite_get_bbox_width(sprite6)*0.7;}
                draw_sprite_ext(sprite6,0,0,sprite_get_bbox_height(texture)/2-sprite_get_yoffset(texture)+(sprite_get_bbox_bottom(texture)-sprite_get_bbox_top(texture))/2,__scale,__scale,0,c_white,image_alpha);
                if (!lookAtCamera) {d3d_transform_add_rotation_z(-(point_direction(x,y,obj3DCamera.x,obj3DCamera.y)+90));}*/
                if (!doAnimationOfJ) {gameDebug.drawDoCursorInpos=1; gameDebug.drawDoCursor=1;}
                if (mouse_check_button_pressed(mb_left)) {doAnimationOfJ=1; d3d_do_action();}}}
            else {if (point_distance_3d(x,y,z,obj3DCamera.x,obj3DCamera.y,obj3DCamera.z+obj3DCamera._lookfromz)&lt;sprite_get_bbox_width(texture)*1.5*sclx) {
            if (obj3DCamera.direction &gt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)-60 &amp;&amp; obj3DCamera.direction &lt; point_direction(obj3DCamera.x,obj3DCamera.y,x,y)+60) {
                if (!doAnimationOfJ) {gameDebug.drawDoCursorInpos=0; gameDebug.drawDoCursor=1;}
                if (mouse_check_button_pressed(mb_left)) {doAnimationOfJ=1; d3d_do_action();}}}}}}}
    else {draw_sprite_ext(sprNoTexture,0,0,0,image_xscale*4,image_yscale*4,0,c_white,image_alpha);}
    if (!lookAtCamera) {//d3d_transform_add_rotation_z(180);
        if (sprite_exists(texture)) {draw_sprite_ext(texture,0,0,0,-1,1,0,c_black,image_alpha);}
        else {draw_sprite_ext(sprNoTexture,0,0,0,-4*image_xscale,4*image_yscale,0,c_white,image_alpha);}}
    d3d_transform_set_identity();}
if (type == 9) {//draw_set_color(c_white); draw_set_alpha(1); draw_set_blend_mode(bm_normal);
    d3d_set_hidden(0); d3d_set_lighting(0); texture_set_repeat(0);
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(rotx);
    d3d_transform_add_rotation_y(roty);
    d3d_transform_add_rotation_z(rotz);
    d3d_transform_add_scaling(sclx,scly,sclz);
    if (!followCamera) {d3d_transform_add_translation(x,y,z);}
    else {d3d_transform_add_translation(obj3DCamera.x,obj3DCamera.y,obj3DCamera.z);}
    d3d_model_draw(skybox_n,0,0,0,tex_n);
    d3d_model_draw(skybox_e,0,0,0,tex_e);
    d3d_model_draw(skybox_s,0,0,0,tex_s);
    d3d_model_draw(skybox_w,0,0,0,tex_w);
    d3d_model_draw(skybox_u,0,0,0,tex_u);
    d3d_model_draw(skybox_d,0,0,0,tex_d);
    d3d_transform_set_identity();
    d3d_set_hidden(1);}

d3d_end(); draw_set_alpha_test(0);

/*if (global.debug) {if (type==1) {draw_line_width_colour(x+x1,y+y1,x+x2,y+y1,10,c_white,c_white);
    draw_line_width_colour(x+x2,y+y1,x+x2,y+y2,10,c_white,c_white);
    draw_line_width_colour(x+x2,y+y2,x+x1,y+y2,10,c_white,c_white);
    draw_line_width_colour(x+x1,y+y2,x+x1,y+y1,10,c_white,c_white);}
if (type==2) {draw_line_width_colour(x+x1,y+y1,x+x2,y+y1,10,c_white,c_white);
    draw_line_width_colour(x+x2,y+y1,x+x2,y+y2,10,c_white,c_white);
    draw_line_width_colour(x+x2,y+y2,x+x1,y+y2,10,c_white,c_white);
    draw_line_width_colour(x+x1,y+y2,x+x1,y+y1,10,c_white,c_white);}}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
