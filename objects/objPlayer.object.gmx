<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite5</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dirs = 0; crx = 0; crouch = 0; viewy1 = 0; doingView=1; _dotime=0;
z = 0; speed1=0; viewx = 0; viewy = 0; viewf = 0; canMove=1; onvarName="obj player";

accspeed=8; speedclamp=10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>doingView=0; if (!instance_exists(obj3DCamera)) {exit;} if (!instance_exists(obj3DCamera.follow)) {exit;} if (obj3DCamera.follow.id != id) {exit;}
if (global.is3DHide) {exit;}
_dotime+=1; if (global.gamePause) {exit;} if (global.trBack) {exit;} if (global.chat_open) {exit;}
if (instance_exists(objGUI_dialogue)) {exit;} if (!obj3DCamera.canView) {exit;} if (!canMove) {exit;} doingView=1;
if (_dotime&gt;2) {display_mouse_set(display_get_width()/2,display_get_height()/2);} _dotime=0;

direction = obj3DCamera.direction;
obj3DCamera.crouch = crouch;

crouch -= crx*15.1*Time.deltatime*2;
crouch -= crouch/10*Time.deltatime*2;

if (speed1&gt;2 || speed1&lt;-2 || dirs&gt;2 || dirs&lt;-2) {_spd = max(abs(speed1),abs(dirs));
    if (viewf == 0) {if (viewy1&lt;70) {viewy1+=_spd/2.2*Time.deltatime*2;} else {viewy1=70; viewf=1;}}
    else if (viewf == 1) {if (viewy1&gt;-70) {viewy1-=_spd/2.2*Time.deltatime*2;} else {viewy1=-70; viewf=0;}}
    viewy = min(viewy1,viewy+viewy1/10*Time.deltatime*2);
    //if (viewy1&gt;0) {viewy = min(viewy1,viewy+viewy1/10);}
    //if (viewy1&lt;0) {viewy = max(viewy1,viewy-abs(viewy1)/10);}
    }
else {if (viewy&gt;0) {viewy = max(0,viewy-viewy/6*Time.deltatime*2);}
    else if (viewy&lt;0) {viewy = min(0,viewy+abs(viewy)/6*Time.deltatime*2);}}

if keyboard_check(vk_control) {crx += 0.125*Time.deltatime*2; if crx &gt; 1.5 then crx = 1.5;} else {crx -= crx/8*Time.deltatime*2;}

if (keyboard_check(ord('E'))) {z+=accspeed*Time.deltatime*2;}
if (keyboard_check(ord('Q'))) {z-=accspeed*Time.deltatime*2;}

if (keyboard_check(ord('W'))) {speed1+=accspeed*Time.deltatime*2+accspeed*keyboard_check(vk_shift)*Time.deltatime*2;}
if (keyboard_check(ord('S'))) {speed1-=accspeed*Time.deltatime*2+accspeed*keyboard_check(vk_shift)*Time.deltatime*2;}
if (keyboard_check(ord('A'))) {dirs+=accspeed*Time.deltatime*2+accspeed*keyboard_check(vk_shift)*Time.deltatime*2;}
if (keyboard_check(ord('D'))) {dirs-=accspeed*Time.deltatime*2+accspeed*keyboard_check(vk_shift)*Time.deltatime*2;}
dirs-=dirs/4*Time.deltatime*2; speed1-=speed1/4*Time.deltatime*2; //if (speed1&gt;0) {speed1-=abs(speed1)/4;} else {speed1+=abs(speed1)/4;}
//speed1=clamp(speed1,-speedclamp-(speedclamp*keyboard_check(vk_shift)),speedclamp+(speedclamp*keyboard_check(vk_shift)));

if (speed1 != 0) {xn = x - sin((direction-90)*pi/180) * speed1*Time.deltatime*2;
    yn = y - cos((direction-90)*pi/180) * speed1*Time.deltatime*2;
    if (!place_meeting(x,yn,par_wall)) {y = yn;}
    if (!place_meeting(xn,y,par_wall)) {x = xn;}}

xn = x - sin(direction*pi/180) * dirs*Time.deltatime*2;
yn = y - cos(direction*pi/180) * dirs*Time.deltatime*2;
if (!place_meeting(x,yn,par_wall)) {y = yn;}
if (!place_meeting(xn,y,par_wall)) {x = xn;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
