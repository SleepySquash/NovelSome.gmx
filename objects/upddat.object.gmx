<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inited=0; chUpdates=0; chNum=0; waiting=0; updcount=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!inited) {exit;}
if (!chUpdates) {chNum=0; waiting=0; exit;} if (global.limTraffic || !global.checkUpdates) {chNum=0; waiting=0; chUpdates=0; exit;}
//if (waiting) {alarm[2]=1; exit;}
cCount=0; while (cCount&lt;2) {if (chNum&gt;=global.novelCount) {//if (waiting) {alarm[2]=1; exit;}
    chNum=0; chUpdates=0; if (instance_exists(objStore)) {if (objStore.etype==3) {objStore.isReq=0;}} exit;}
while (novdat.novelID[chNum]==-1) {chNum+=1; if (chNum&gt;=global.novelCount) {chNum=0; if (instance_exists(objStore)) {
    if (objStore.etype==3) {objStore.isReq=0;}} chUpdates=0; exit;}}
if (!novdat.needUpdate[chNum]) {client_request_nupdated(novdat.novelID[chNum]); waiting=1;} chNum+=1; alarm[2]=1; cCount+=1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!inited) {exit;}
//if (!global.limTraffic &amp;&amp; global.checkUpdates) {waiting=0; chUpdates=1; chNum=0; alarm[2]=1*Time.deltaTime;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*inited=1; updcount=0; list=ds_list_create(); lmap=ds_map_create(); file=file_text_open_read(working_directory+"update.nslist");
if (file!=-1) {_grid=ds_grid_create(1,global.novelCount); _c=0; _mp=ds_map_create(); while (!file_text_eof(file)) {
    fstr=file_text_read_string(file); num=(string_get_sstring(fstr,1)); if (num!="") {
        updtime=real(string_copy(fstr,string_length(num+" ")+1,string_length(fstr)-string_length(num+" ")));
        mget=ds_map_find_value(novdat.expid,real(num)); if (!is_undefined(mget)) {
            if (novdat.AUpose[mget]&lt;updtime) {novdat.needUpdate[mget]=1; ds_map_add(lmap,real(num),updtime);
                ds_grid_add(_grid,0,_c,real(num)); _c+=1; ds_map_add(_mp,real(num),updtime);}}}
    file_text_readln(file);} file_text_close(file); if (_c&gt;0) {ds_grid_resize(_grid,1,_c); ds_grid_sort(_grid,0,1);
            for (i=0;i&lt;ds_grid_height(_grid);i+=1) {ds_list_add(list,ds_map_find_value(_map,ds_grid_get(_grid,0,i)));}}
        ds_grid_destroy(_grid); ds_map_destroy(_mp);} updcount=ds_list_size(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (os_browser != browser_not_a_browser) {exit;} if (os_type != os_windows) {exit;}
if (inited) {if (updcount&gt;0) {file=FS_file_text_open_write(working_directory+"update.nslist");
    for (i=0;i&lt;ds_list_size(list);i+=1) {lget=ds_list_find_value(list,i);
        FS_file_text_write_string(file,string(lget)+" "+string(ds_map_find_value(lmap,lget)));
        FS_file_text_writeln(file);} FS_file_text_close(file);} else {if (file_exists(working_directory+"update.nslist")) {
            FS_file_delete(working_directory+"update.nslist");}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
