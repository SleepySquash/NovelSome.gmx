<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>ML_Parser</name>
  <version>2.1.0</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>26/06/14</date>
  <license>    Mathimatical Logical Parser, parses user expressions.
    Copyright (C) 2011-2014  Paul Weijtens

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</license>
  <description></description>
  <helpfile></helpfile>
  <androidProps>0</androidProps>
  <iosProps>0</iosProps>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <maccompilerflags></maccompilerflags>
  <androidinject></androidinject>
  <gradleinject></gradleinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <androidPermissions/>
  <IncludedResources/>
  <files>
    <file>
      <filename>ML_Parser.gml</filename>
      <origname>extensions/ML_Parser.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>17593040752878</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>ML_AddAssignOper</name>
          <externalName>ML_AddAssignOper</externalName>
          <kind>11</kind>
          <help>ML_AddAssignOper(parser, operator, precedence, script, returntype, lhstype, rhstype[, assoc])</help>
          <returnType>2</returnType>
          <argCount>8</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_AddBinaryOper</name>
          <externalName>ML_AddBinaryOper</externalName>
          <kind>11</kind>
          <help>ML_AddBinaryOper(parser, operator, precedence, script, returntype, lhstype, rhstype[, assoc])</help>
          <returnType>2</returnType>
          <argCount>8</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_AddFunctionArgList</name>
          <externalName>ML_AddFunctionArgList</externalName>
          <kind>11</kind>
          <help>ML_AddFunctionArgList(parser, functionstring,scriptid,returntype, argtypelist)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_AddTernaryOper</name>
          <externalName>ML_AddTernaryOper</externalName>
          <kind>11</kind>
          <help>ML_AddTernaryOper(parser, operator1, operator2, precedence, script, returntype, lhstype, mhstype, rhstype[, assoc])</help>
          <returnType>2</returnType>
          <argCount>10</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_AddUnaryOper</name>
          <externalName>ML_AddUnaryOper</externalName>
          <kind>11</kind>
          <help>ML_AddUnaryOper(parser, operator, precedence,script,returntype, valtype,[ affix])</help>
          <returnType>2</returnType>
          <argCount>7</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_AddVariable</name>
          <externalName>ML_AddVariable</externalName>
          <kind>11</kind>
          <help>ML_AddVariable(parser, varstring,[value, type, readonly = true])</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_Calculate</name>
          <externalName>ML_Calculate</externalName>
          <kind>11</kind>
          <help>ML_Calculate(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearAssignOper</name>
          <externalName>ML_ClearAssignOper</externalName>
          <kind>11</kind>
          <help>ML_ClearAssignOper(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearBinaryOper</name>
          <externalName>ML_ClearBinaryOper</externalName>
          <kind>11</kind>
          <help>ML_ClearBinaryOper(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearExceptions</name>
          <externalName>ML_ClearExceptions</externalName>
          <kind>11</kind>
          <help>ML_ClearExceptions(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearExceptions_CurParser</name>
          <externalName>ML_ClearExceptions_CurParser</externalName>
          <kind>11</kind>
          <help>ML_ClearExceptions_CurParser()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_ClearFunction</name>
          <externalName>ML_ClearFunction</externalName>
          <kind>11</kind>
          <help>ML_ClearFunction(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearTernaryOper</name>
          <externalName>ML_ClearTernaryOper</externalName>
          <kind>11</kind>
          <help>ML_ClearTernaryOper(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearUnaryOper</name>
          <externalName>ML_ClearUnaryOper</externalName>
          <kind>11</kind>
          <help>ML_ClearUnaryOper(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ClearVariable</name>
          <externalName>ML_ClearVariable</externalName>
          <kind>11</kind>
          <help>ML_ClearVariable(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_Compile</name>
          <externalName>ML_Compile</externalName>
          <kind>11</kind>
          <help>ML_Compile(parser, expression)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_CompileCleanup</name>
          <externalName>ML_CompileCleanup</externalName>
          <kind>11</kind>
          <help>ML_CompileCleanup(Compile)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_CompileDecode</name>
          <externalName>ML_CompileDecode</externalName>
          <kind>11</kind>
          <help>ML_CompileDecode(buffer, offset)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_CompileEncode</name>
          <externalName>ML_CompileEncode</externalName>
          <kind>11</kind>
          <help>ML_CompileEncode(buffer, compile, offset)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_DestroyParser</name>
          <externalName>ML_DestroyParser</externalName>
          <kind>11</kind>
          <help>ML_DestroyParser(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_Execute</name>
          <externalName>ML_Execute</externalName>
          <kind>11</kind>
          <help>ML_Execute(parser, compile)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_GetAnswer</name>
          <externalName>ML_GetAnswer</externalName>
          <kind>11</kind>
          <help>ML_GetAnswer(parser, answer_ind)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_GetAnswerNum</name>
          <externalName>ML_GetAnswerNum</externalName>
          <kind>11</kind>
          <help>ML_GetAnswerNum(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_GetAnswerType</name>
          <externalName>ML_GetAnswerType</externalName>
          <kind>11</kind>
          <help>ML_GetAnswerType(parser, answer_ind)</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_GetExprString</name>
          <externalName>ML_GetExprString</externalName>
          <kind>11</kind>
          <help>ML_GetExprString(parser)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_GetFinalAnswer</name>
          <externalName>ML_GetFinalAnswer</externalName>
          <kind>11</kind>
          <help>ML_GetFinalAnswer(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_HasAnswer</name>
          <externalName>ML_HasAnswer</externalName>
          <kind>11</kind>
          <help>ML_HasAnswer(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_Initialize</name>
          <externalName>ML_Initialize</externalName>
          <kind>11</kind>
          <help>ML_Initialize()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_InitParserEmpty</name>
          <externalName>ML_InitParserEmpty</externalName>
          <kind>11</kind>
          <help>ML_InitParserEmpty(VarMap)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_Interpret</name>
          <externalName>ML_Interpret</externalName>
          <kind>11</kind>
          <help>ML_Interpret(parser, string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_LastException</name>
          <externalName>ML_LastException</externalName>
          <kind>11</kind>
          <help>ML_LastException(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_LastExceptionPosition</name>
          <externalName>ML_LastExceptionPosition</externalName>
          <kind>11</kind>
          <help>ML_LastExceptionPosition(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_LastExceptionPosition_CurParser</name>
          <externalName>ML_LastExceptionPosition_CurParser</externalName>
          <kind>11</kind>
          <help>ML_LastExceptionPosition_CurParser()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_LastExceptionString</name>
          <externalName>ML_LastExceptionString</externalName>
          <kind>11</kind>
          <help>ML_LastExceptionString(parser)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_LastExceptionString_CurParser</name>
          <externalName>ML_LastExceptionString_CurParser</externalName>
          <kind>11</kind>
          <help>ML_LastExceptionString_CurParser(parser)</help>
          <returnType>1</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_LastException_CurParser</name>
          <externalName>ML_LastException_CurParser</externalName>
          <kind>11</kind>
          <help>ML_LastException_CurParser()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_NoException</name>
          <externalName>ML_NoException</externalName>
          <kind>11</kind>
          <help>ML_NoException(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_NoException_CurParser</name>
          <externalName>ML_NoException_CurParser</externalName>
          <kind>11</kind>
          <help>ML_NoException_CurParser()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>ML_RaiseException</name>
          <externalName>ML_RaiseException</externalName>
          <kind>11</kind>
          <help>ML_RaiseException(parser, Exception, position, [string])</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RaiseException_CurParser</name>
          <externalName>ML_RaiseException_CurParser</externalName>
          <kind>11</kind>
          <help>ML_RaiseException_CurParser(Exception, position, [string])</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemAssignOper</name>
          <externalName>ML_RemAssignOper</externalName>
          <kind>11</kind>
          <help>ML_RemAssignOper(parser, index)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemAssignOperStr</name>
          <externalName>ML_RemAssignOperStr</externalName>
          <kind>11</kind>
          <help>ML_RemAssignOperStr(parser, Assign operator string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemBinaryOper</name>
          <externalName>ML_RemBinaryOper</externalName>
          <kind>11</kind>
          <help>ML_RemBinaryOper(parser, index)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemBinaryOperStr</name>
          <externalName>ML_RemBinaryOperStr</externalName>
          <kind>11</kind>
          <help>ML_RemBinaryOperStr(parser, Binary operator string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemFunction</name>
          <externalName>ML_RemFunction</externalName>
          <kind>11</kind>
          <help>ML_RemFunction(parser, index)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemFunctionStr</name>
          <externalName>ML_RemFunctionStr</externalName>
          <kind>11</kind>
          <help>ML_RemFunctionStr(parser, function_string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemTernaryOper</name>
          <externalName>ML_RemTernaryOper</externalName>
          <kind>11</kind>
          <help>ML_RemTernaryOper(parser, index);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemTernaryOperStr</name>
          <externalName>ML_RemTernaryOperStr</externalName>
          <kind>11</kind>
          <help>ML_RemTernaryOperStr(parser, Ternary operator string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemUnaryOper</name>
          <externalName>ML_RemUnaryOper</externalName>
          <kind>11</kind>
          <help>ML_RemUnaryOper(parser, index)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemUnaryOperStr</name>
          <externalName>ML_RemUnaryOperStr</externalName>
          <kind>11</kind>
          <help>ML_RemUnaryOperStr(parser, Unary operator string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_RemVariable</name>
          <externalName>ML_RemVariable</externalName>
          <kind>11</kind>
          <help>ML_RemVariable(parser, index) destroys variable - DOES NOT DESTROY IN MAP WITH VALUES</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_RemVariableStr</name>
          <externalName>ML_RemVariableStr</externalName>
          <kind>11</kind>
          <help>ML_RemVariableStr(parser, VarString)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_Cleanup</name>
          <externalName>ML_ResObj_Cleanup</externalName>
          <kind>11</kind>
          <help>ML_ResObj_Cleanup(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_GetAnswer</name>
          <externalName>ML_ResObj_GetAnswer</externalName>
          <kind>11</kind>
          <help>ML_ResObj_GetAnswer(result, answer_ind)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_GetAnswerNum</name>
          <externalName>ML_ResObj_GetAnswerNum</externalName>
          <kind>11</kind>
          <help>ML_ResObj_GetAnswerNum(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_GetAnswerType</name>
          <externalName>ML_ResObj_GetAnswerType</externalName>
          <kind>11</kind>
          <help>ML_ResObj_GetAnswerType(result, answer_ind)</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_GetCalculated</name>
          <externalName>ML_ResObj_GetCalculated</externalName>
          <kind>11</kind>
          <help>ML_ResObj_GetCalculated(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_GetFinalAnswer</name>
          <externalName>ML_ResObj_GetFinalAnswer</externalName>
          <kind>11</kind>
          <help>ML_ResObj_GetFinalAnswer(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResObj_HasAnswer</name>
          <externalName>ML_ResObj_HasAnswer</externalName>
          <kind>11</kind>
          <help>ML_ResObj_HasAnswer(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_ResultCleanup</name>
          <externalName>ML_ResultCleanup</externalName>
          <kind>11</kind>
          <help>ML_ResultCleanup(result)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_SetExpression</name>
          <externalName>ML_SetExpression</externalName>
          <kind>11</kind>
          <help>ML_SetExpression(parser, expression)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_Get</name>
          <externalName>ML_VM_Get</externalName>
          <kind>11</kind>
          <help>ML_VM_Get(parser)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_GetPVarList</name>
          <externalName>ML_VM_GetPVarList</externalName>
          <kind>11</kind>
          <help>ML_VM_GetPVarList(parser, key)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_GetVar</name>
          <externalName>ML_VM_GetVar</externalName>
          <kind>11</kind>
          <help>ML_VM_GetVar(parser, key)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_GetVarReal</name>
          <externalName>ML_VM_GetVarReal</externalName>
          <kind>11</kind>
          <help>ML_VM_GetVarReal(parser, key)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_GetVarString</name>
          <externalName>ML_VM_GetVarString</externalName>
          <kind>11</kind>
          <help>ML_VM_GetVarString(parser, key)</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_HasNoPVar</name>
          <externalName>ML_VM_HasNoPVar</externalName>
          <kind>11</kind>
          <help>ML_VM_HasNoPVar(parser, key)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_RemVar</name>
          <externalName>ML_VM_RemVar</externalName>
          <kind>11</kind>
          <help>ML_VM_RemVar(parser, key)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_Set</name>
          <externalName>ML_VM_Set</externalName>
          <kind>11</kind>
          <help>ML_VM_Set(parser, VarMap, [CreateNewVars] )</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_SetVar</name>
          <externalName>ML_VM_SetVar</externalName>
          <kind>11</kind>
          <help>ML_VM_SetVar(parser, key, value)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_SetVarReal</name>
          <externalName>ML_VM_SetVarReal</externalName>
          <kind>11</kind>
          <help>ML_VM_SetVarReal(parser, key, value)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_SetVarString</name>
          <externalName>ML_VM_SetVarString</externalName>
          <kind>11</kind>
          <help>ML_VM_SetVarString(parser, key, value)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>ML_VM_VarExists</name>
          <externalName>ML_VM_VarExists</externalName>
          <kind>11</kind>
          <help>ML_VM_VarExists(parser, varstring)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_AddAssignSig</name>
          <externalName>_ML_AddAssignSig</externalName>
          <kind>11</kind>
          <help>_ML_AddAssignSig(script, retval)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_AddBinarySig</name>
          <externalName>_ML_AddBinarySig</externalName>
          <kind>11</kind>
          <help>_ML_AddBinarySig(script, retval)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_AddFunctionSig</name>
          <externalName>_ML_AddFunctionSig</externalName>
          <kind>11</kind>
          <help>_ML_AddFunctionSig(script, return)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_AddTernarySig</name>
          <externalName>_ML_AddTernarySig</externalName>
          <kind>11</kind>
          <help>_ML_AddTernarySig(script, retval)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_AddUnarySig</name>
          <externalName>_ML_AddUnarySig</externalName>
          <kind>11</kind>
          <help>_ML_AddUnarySig(script, retval)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodeGrid</name>
          <externalName>_ML_BD_DecodeGrid</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodeGrid(grid, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodeList</name>
          <externalName>_ML_BD_DecodeList</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodeList(list, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodeMap</name>
          <externalName>_ML_BD_DecodeMap</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodeMap(map, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodePriority</name>
          <externalName>_ML_BD_DecodePriority</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodePriority(grid, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodeQueue</name>
          <externalName>_ML_BD_DecodeQueue</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodeQueue(grid, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_DecodeStack</name>
          <externalName>_ML_BD_DecodeStack</externalName>
          <kind>11</kind>
          <help>_ML_BD_DecodeStack(grid, buffer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_BD_GetData</name>
          <externalName>_ML_BD_GetData</externalName>
          <kind>11</kind>
          <help>_ML_BD_GetData(buffer, type)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Assign</name>
          <externalName>_ML_COMP_Assign</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Assign(token, args)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Binary</name>
          <externalName>_ML_COMP_Binary</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Binary( token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_EvalAll</name>
          <externalName>_ML_COMP_EvalAll</externalName>
          <kind>11</kind>
          <help>_ML_COMP_EvalAll(parser, ReversePolishQueue, OutFuncList, OutTokList)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_EvalLine</name>
          <externalName>_ML_COMP_EvalLine</externalName>
          <kind>11</kind>
          <help>_ML_COMP_EvalLine(parser, ReversePolishQueue,  newRPN, importantTokenList)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_EvalToken</name>
          <externalName>_ML_COMP_EvalToken</externalName>
          <kind>11</kind>
          <help>_ML_COMP_EvalToken(parser, argTypeStack, token)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Function</name>
          <externalName>_ML_COMP_Function</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Function( token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_RemoveExtraTokens</name>
          <externalName>_ML_COMP_RemoveExtraTokens</externalName>
          <kind>11</kind>
          <help>_ML_COMP_RemoveExtraTokens(tokenList, importantTokenMap)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Ternary</name>
          <externalName>_ML_COMP_Ternary</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Ternary(tok, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Unary</name>
          <externalName>_ML_COMP_Unary</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Unary( token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Value</name>
          <externalName>_ML_COMP_Value</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Value( token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_COMP_Variable</name>
          <externalName>_ML_COMP_Variable</externalName>
          <kind>11</kind>
          <help>_ML_COMP_Variable( token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_EC_DataInBuff</name>
          <externalName>_ML_EC_DataInBuff</externalName>
          <kind>11</kind>
          <help>_ML_EC_DataInBuff(buff, data, type)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_EC_RPNtoBuff</name>
          <externalName>_ML_EC_RPNtoBuff</externalName>
          <kind>11</kind>
          <help>_ML_EC_RPNtoBuff(buffer, queue_source)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_FirstStringPos</name>
          <externalName>_ML_FirstStringPos</externalName>
          <kind>11</kind>
          <help>_ML_FirstStringPos(str, token1,token2,...,token16)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_FirstStringPos1</name>
          <externalName>_ML_FirstStringPos1</externalName>
          <kind>11</kind>
          <help>_ML_FirstStringPos1(str, token1)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_FirstStringPos2</name>
          <externalName>_ML_FirstStringPos2</externalName>
          <kind>11</kind>
          <help>_ML_FirstStringPos2(str, token1, token2)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_FirstStringPos3</name>
          <externalName>_ML_FirstStringPos3</externalName>
          <kind>11</kind>
          <help>_ML_FirstStringPos3(str, token1, token2, token3)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_Interpret_Detail</name>
          <externalName>_ML_Interpret_Detail</externalName>
          <kind>11</kind>
          <help>_ML_Interpret_Detail(parser, string, resobj)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LexicalAnalysis</name>
          <externalName>_ML_LexicalAnalysis</externalName>
          <kind>11</kind>
          <help>_ML_LexicalAnalysis(parser, tokenlist, string)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Alnum</name>
          <externalName>_ML_LEX_Alnum</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Alnum(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Alpha</name>
          <externalName>_ML_LEX_Alpha</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Alpha(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Blank</name>
          <externalName>_ML_LEX_Blank</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Blank(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Cntrl</name>
          <externalName>_ML_LEX_Cntrl</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Cntrl(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Digit</name>
          <externalName>_ML_LEX_Digit</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Digit(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Graph</name>
          <externalName>_ML_LEX_Graph</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Graph(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsAssignoper</name>
          <externalName>_ML_LEX_IsAssignoper</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsAssignoper(parser, token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsBinoper</name>
          <externalName>_ML_LEX_IsBinoper</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsBinoper(parser, token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsFunction</name>
          <externalName>_ML_LEX_IsFunction</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsFunction(parser, token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsTernOper</name>
          <externalName>_ML_LEX_IsTernOper</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsTernOper(parser, token, previoustoken)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsTernOper2</name>
          <externalName>_ML_LEX_IsTernOper2</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsTernOper2(parser, token, previoustoken)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsUnoper</name>
          <externalName>_ML_LEX_IsUnoper</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsUnoper(parser, token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsValue</name>
          <externalName>_ML_LEX_IsValue</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsValue(token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_IsVariable</name>
          <externalName>_ML_LEX_IsVariable</externalName>
          <kind>11</kind>
          <help>_ML_LEX_IsVariable(parser, token, prevtok)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Lower</name>
          <externalName>_ML_LEX_Lower</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Lower(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Print</name>
          <externalName>_ML_LEX_Print</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Print(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Punct</name>
          <externalName>_ML_LEX_Punct</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Punct(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Space</name>
          <externalName>_ML_LEX_Space</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Space(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_TokenAdd</name>
          <externalName>_ML_LEX_TokenAdd</externalName>
          <kind>11</kind>
          <help>_ML_LEX_TokenAdd(list, string, position)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_TokenSetType</name>
          <externalName>_ML_LEX_TokenSetType</externalName>
          <kind>11</kind>
          <help>_ML_LEX_TokenSetType(parser, token, type)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Upper</name>
          <externalName>_ML_LEX_Upper</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Upper(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Word</name>
          <externalName>_ML_LEX_Word</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Word(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LEX_Xdigit</name>
          <externalName>_ML_LEX_Xdigit</externalName>
          <kind>11</kind>
          <help>_ML_LEX_Xdigit(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiAOpS_Create</name>
          <externalName>_ML_LiAOpS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiAOpS_Create(script, returntype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiAOp_Create</name>
          <externalName>_ML_LiAOp_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiAOp_Create(name, precedence, associativity)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiAOp_Destroy</name>
          <externalName>_ML_LiAOp_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiAOp_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiBOpS_Create</name>
          <externalName>_ML_LiBOpS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiBOpS_Create(script, returntype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiBOp_Create</name>
          <externalName>_ML_LiBOp_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiBOp_Create(name, precedence, associativity)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiBOp_Destroy</name>
          <externalName>_ML_LiBOp_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiBOp_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiFS_Create</name>
          <externalName>_ML_LiFS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiFS_Create(script, rettype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiF_AddSig</name>
          <externalName>_ML_LiF_AddSig</externalName>
          <kind>11</kind>
          <help>_ML_LiF_AddSig(operator_id, argstring, actual_functor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiF_Create</name>
          <externalName>_ML_LiF_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiF_Create(name)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiF_Destroy</name>
          <externalName>_ML_LiF_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiF_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiF_GetFunc</name>
          <externalName>_ML_LiF_GetFunc</externalName>
          <kind>11</kind>
          <help>_ML_LiF_GetFunc(baseopid, signature_string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiF_GetFuncs</name>
          <externalName>_ML_LiF_GetFuncs</externalName>
          <kind>11</kind>
          <help>_ML_LiF_GetFuncs(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiOp_GetAssoc</name>
          <externalName>_ML_LiOp_GetAssoc</externalName>
          <kind>11</kind>
          <help>_ML_LiOp_GetAssoc(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiOp_GetPrec</name>
          <externalName>_ML_LiOp_GetPrec</externalName>
          <kind>11</kind>
          <help>_ML_LiOp_GetPrec(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_Create</name>
          <externalName>_ML_LiP_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiP_Create(expression, variable_map)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_Destroy</name>
          <externalName>_ML_LiP_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiP_Destroy(ind);</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetAssignOpsTable</name>
          <externalName>_ML_LiP_GetAssignOpsTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetAssignOpsTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetBinOpsTable</name>
          <externalName>_ML_LiP_GetBinOpsTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetBinOpsTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetErrorFlags</name>
          <externalName>_ML_LiP_GetErrorFlags</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetErrorFlags(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetErrorPos</name>
          <externalName>_ML_LiP_GetErrorPos</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetErrorPos(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetErrorString</name>
          <externalName>_ML_LiP_GetErrorString</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetErrorString(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetFunctionString</name>
          <externalName>_ML_LiP_GetFunctionString</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetFunctionString(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetFunctionTable</name>
          <externalName>_ML_LiP_GetFunctionTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetFunctionTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetOperatorRoots</name>
          <externalName>_ML_LiP_GetOperatorRoots</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetOperatorRoots(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetResultObject</name>
          <externalName>_ML_LiP_GetResultObject</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetResultObject(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetTernOps2Table</name>
          <externalName>_ML_LiP_GetTernOps2Table</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetTernOps2Table(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetTernOpsTable</name>
          <externalName>_ML_LiP_GetTernOpsTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetTernOpsTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetUnOpsTable</name>
          <externalName>_ML_LiP_GetUnOpsTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetUnOpsTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetVariableTable</name>
          <externalName>_ML_LiP_GetVariableTable</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetVariableTable(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_GetVarMap</name>
          <externalName>_ML_LiP_GetVarMap</externalName>
          <kind>11</kind>
          <help>_ML_LiP_GetVarMap(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_SetErrorFlags</name>
          <externalName>_ML_LiP_SetErrorFlags</externalName>
          <kind>11</kind>
          <help>_ML_LiP_SetErrorFlags(index, flag)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_SetErrorPos</name>
          <externalName>_ML_LiP_SetErrorPos</externalName>
          <kind>11</kind>
          <help>_ML_LiP_SetErrorPos(index, position)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_SetErrorString</name>
          <externalName>_ML_LiP_SetErrorString</externalName>
          <kind>11</kind>
          <help>_ML_LiP_SetErrorString(index, string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_SetFunctionString</name>
          <externalName>_ML_LiP_SetFunctionString</externalName>
          <kind>11</kind>
          <help>_ML_LiP_SetFunctionString(index, string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiP_SetVarMap</name>
          <externalName>_ML_LiP_SetVarMap</externalName>
          <kind>11</kind>
          <help>_ML_LiP_SetVarMap(index, map)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_Add</name>
          <externalName>_ML_LiRO_Add</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Add(ind, answer, type)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_AddToken</name>
          <externalName>_ML_LiRO_AddToken</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_AddToken(res_obj, token, )</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_Clear</name>
          <externalName>_ML_LiRO_Clear</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Clear(ind);</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_Create</name>
          <externalName>_ML_LiRO_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>_ML_LiRO_Destroy</name>
          <externalName>_ML_LiRO_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Destroy(ind);</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_Get</name>
          <externalName>_ML_LiRO_Get</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Get(ind, n);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_GetAll</name>
          <externalName>_ML_LiRO_GetAll</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_GetAll(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_GetAllType</name>
          <externalName>_ML_LiRO_GetAllType</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_GetAllType(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_GetCalculated</name>
          <externalName>_ML_LiRO_GetCalculated</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_GetCalculated(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_GetFinal</name>
          <externalName>_ML_LiRO_GetFinal</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_GetFinal(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_GetType</name>
          <externalName>_ML_LiRO_GetType</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_GetType(ind, n);</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_SetCalculated</name>
          <externalName>_ML_LiRO_SetCalculated</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_SetCalculated(index, calc)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_SetFinal</name>
          <externalName>_ML_LiRO_SetFinal</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_SetFinal(index, answer)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiRO_Size</name>
          <externalName>_ML_LiRO_Size</externalName>
          <kind>11</kind>
          <help>_ML_LiRO_Size(ind);</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiS_Create</name>
          <externalName>_ML_LiS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiS_Create(script, rettype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiS_Destroy</name>
          <externalName>_ML_LiS_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiS_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiS_GetRettype</name>
          <externalName>_ML_LiS_GetRettype</externalName>
          <kind>11</kind>
          <help>_ML_LiS_GetRettype(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiS_GetScript</name>
          <externalName>_ML_LiS_GetScript</externalName>
          <kind>11</kind>
          <help>_ML_LiS_GetScript(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_Create</name>
          <externalName>_ML_LiTok_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_Create( string, pos)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_Destroy</name>
          <externalName>_ML_LiTok_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_FromBuff</name>
          <externalName>_ML_LiTok_FromBuff</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_FromBuff(tok, buffer);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_GetArgcount</name>
          <externalName>_ML_LiTok_GetArgcount</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_GetArgcount(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_GetOperator</name>
          <externalName>_ML_LiTok_GetOperator</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_GetOperator(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_GetPos</name>
          <externalName>_ML_LiTok_GetPos</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_GetPos(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_GetType</name>
          <externalName>_ML_LiTok_GetType</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_GetType(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_GetVal</name>
          <externalName>_ML_LiTok_GetVal</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_GetVal(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_SetArgcount</name>
          <externalName>_ML_LiTok_SetArgcount</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_SetArgcount(index, argc)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_SetOperator</name>
          <externalName>_ML_LiTok_SetOperator</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_SetOperator(index, Op)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_SetString</name>
          <externalName>_ML_LiTok_SetString</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_SetString(index, str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_SetType</name>
          <externalName>_ML_LiTok_SetType</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_SetType(index, type)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTok_ToBuff</name>
          <externalName>_ML_LiTok_ToBuff</externalName>
          <kind>11</kind>
          <help>_ML_LiTok_ToBuff(buffer, tok);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTOpS_Create</name>
          <externalName>_ML_LiTOpS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiTOpS_Create(script, returntype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTOp_Create</name>
          <externalName>_ML_LiTOp_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiTOp_Create(name_P1, name_P2, precedence, associativity)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTOp_Destroy</name>
          <externalName>_ML_LiTOp_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiTOp_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTOp_GetFirstName</name>
          <externalName>_ML_LiTOp_GetFirstName</externalName>
          <kind>11</kind>
          <help>_ML_LiTOp_GetFirstName(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiTOp_GetSecondName</name>
          <externalName>_ML_LiTOp_GetSecondName</externalName>
          <kind>11</kind>
          <help>_ML_LiTOp_GetSecondName(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiUOpS_Create</name>
          <externalName>_ML_LiUOpS_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiUOpS_Create(script, returntype);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiUOp_Create</name>
          <externalName>_ML_LiUOp_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiUOp_Create(name, precedence, associativity, affix)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiUOp_Destroy</name>
          <externalName>_ML_LiUOp_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiUOp_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiUOp_GetAffix</name>
          <externalName>_ML_LiUOp_GetAffix</externalName>
          <kind>11</kind>
          <help>_ML_LiUOp_GetAffix(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiVar_Create</name>
          <externalName>_ML_LiVar_Create</externalName>
          <kind>11</kind>
          <help>_ML_LiVar_Create(string, type, readonly)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiVar_Destroy</name>
          <externalName>_ML_LiVar_Destroy</externalName>
          <kind>11</kind>
          <help>_ML_LiVar_Destroy(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiVar_GetReadonly</name>
          <externalName>_ML_LiVar_GetReadonly</externalName>
          <kind>11</kind>
          <help>_ML_LiVar_GetReadonly(index)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_LiVar_GetType</name>
          <externalName>_ML_LiVar_GetType</externalName>
          <kind>11</kind>
          <help>_ML_LiVar_GetType(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_Li_GetName</name>
          <externalName>_ML_Li_GetName</externalName>
          <kind>11</kind>
          <help>_ML_Li_GetName(index)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_NewAssignOper</name>
          <externalName>_ML_NewAssignOper</externalName>
          <kind>11</kind>
          <help>_ML_NewAssignOper(operator, precedence, script,returntype, lhstype, rhstype, assoc)</help>
          <returnType>2</returnType>
          <argCount>7</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_NewBinaryOper</name>
          <externalName>_ML_NewBinaryOper</externalName>
          <kind>11</kind>
          <help>_ML_NewBinaryOper(operator,precedence,script,returntype, lhstype, rhstype, assoc)</help>
          <returnType>2</returnType>
          <argCount>7</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_NewFunction</name>
          <externalName>_ML_NewFunction</externalName>
          <kind>11</kind>
          <help>_ML_NewFunction(function_string,script,returntype, arglist)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_NewTernaryOper</name>
          <externalName>_ML_NewTernaryOper</externalName>
          <kind>11</kind>
          <help>_ML_NewTernaryOper(operator1, operator2,precedence,script,returntype, lhstype, mhstype, rhstype, assoc)</help>
          <returnType>2</returnType>
          <argCount>9</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_NewUnaryOper</name>
          <externalName>_ML_NewUnaryOper</externalName>
          <kind>11</kind>
          <help>_ML_NewUnaryOper(operator, precedence,script,returntype, lhstype, affix)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>1</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_OpAddRoots</name>
          <externalName>_ML_OpAddRoots</externalName>
          <kind>11</kind>
          <help>_ML_OpAddRoots(parser, string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_OpRemRoots</name>
          <externalName>_ML_OpRemRoots</externalName>
          <kind>11</kind>
          <help>_ML_OpRemRoots(parser, string)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>_ML_Parse</name>
          <externalName>_ML_Parse</externalName>
          <kind>11</kind>
          <help>_ML_Parse(parser, ReversePolishQueue, ResultObject)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_ParseCompiled</name>
          <externalName>_ML_ParseCompiled</externalName>
          <kind>11</kind>
          <help>_ML_ParseCompiled(parser, ReversePolishQueue, ResultObject)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSECOMP_EvalLine</name>
          <externalName>_ML_PARSECOMP_EvalLine</externalName>
          <kind>11</kind>
          <help>_ML_PARSECOMP_EvalLine(parser, rpn, resultObject)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSECOMP_EvalToken</name>
          <externalName>_ML_PARSECOMP_EvalToken</externalName>
          <kind>11</kind>
          <help>_ML_PARSECOMP_EvalToken(parser, argTypeStack, token, temptokens)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_Assign</name>
          <externalName>_ML_PARSE_Assign</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Assign(parser, token, args)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_AssignFlat</name>
          <externalName>_ML_PARSE_AssignFlat</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_AssignFlat(parser, token, args, temptokens)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_Binary</name>
          <externalName>_ML_PARSE_Binary</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Binary(parser, tok, argstack)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_EvalLine</name>
          <externalName>_ML_PARSE_EvalLine</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_EvalLine(parser, rpn, resultObject)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_EvalToken</name>
          <externalName>_ML_PARSE_EvalToken</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_EvalToken(parser, argTypeStack, token)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_FuncFlat</name>
          <externalName>_ML_PARSE_FuncFlat</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_FuncFlat(parser, token, args, temptokens)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_Function</name>
          <externalName>_ML_PARSE_Function</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Function(parser, token, args)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_GetFullFunction</name>
          <externalName>_ML_PARSE_GetFullFunction</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>_ML_PARSE_RemToken</name>
          <externalName>_ML_PARSE_RemToken</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>_ML_PARSE_Ternary</name>
          <externalName>_ML_PARSE_Ternary</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Ternary(parser, tok, argstack)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_Unary</name>
          <externalName>_ML_PARSE_Unary</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Unary(parser, token, argstack)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_PARSE_Value</name>
          <externalName>_ML_PARSE_Value</externalName>
          <kind>11</kind>
          <help>_ML_PARSE_Value(token, argstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_ShuntingYard</name>
          <externalName>_ML_ShuntingYard</externalName>
          <kind>11</kind>
          <help>_ML_ShuntingYard(parser, tokens, rpn)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleArgSep</name>
          <externalName>_ML_SY_HandleArgSep</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleArgSep(parser, token, output, stack);</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleEOL</name>
          <externalName>_ML_SY_HandleEOL</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleEOL(parser, token, output, stack);</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleExprTerminator</name>
          <externalName>_ML_SY_HandleExprTerminator</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleExprTerminator(parser, token, output, stack)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleFunction</name>
          <externalName>_ML_SY_HandleFunction</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleFunction(token, functionstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleLeftPar</name>
          <externalName>_ML_SY_HandleLeftPar</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleLeftPar(token, functionstack)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleOperator</name>
          <externalName>_ML_SY_HandleOperator</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleOperator(parser, token, output, stack)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleRightPar</name>
          <externalName>_ML_SY_HandleRightPar</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleRightPar(parser, token, output, stack, argcount, stackofoutputs, stackofstacks,  level);</help>
          <returnType>2</returnType>
          <argCount>8</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleTernary2</name>
          <externalName>_ML_SY_HandleTernary2</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleTernary2(parser, token, output, stack);</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_HandleValue</name>
          <externalName>_ML_SY_HandleValue</externalName>
          <kind>11</kind>
          <help>_ML_SY_HandleValue(token, exprqueue)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_ListAppendList</name>
          <externalName>_ML_SY_ListAppendList</externalName>
          <kind>11</kind>
          <help>_ML_SY_ListAppendList(q1, q2);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_OperatorActBefore</name>
          <externalName>_ML_SY_OperatorActBefore</externalName>
          <kind>11</kind>
          <help>_ML_SY_OperatorActBefore(o1, o2)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_QueueAppendQueue</name>
          <externalName>_ML_SY_QueueAppendQueue</externalName>
          <kind>11</kind>
          <help>_ML_SY_QueueAppendQueue(q1, q2);</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_TernaryIsMatchingToken</name>
          <externalName>_ML_SY_TernaryIsMatchingToken</externalName>
          <kind>11</kind>
          <help>_ML_SY_TernaryIsMatchingToken(token1, map)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_SY_TokenIsOperator</name>
          <externalName>_ML_SY_TokenIsOperator</externalName>
          <kind>11</kind>
          <help>_ML_SY_TokenIsOperator(tok)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_TernaryAddSecond</name>
          <externalName>_ML_TernaryAddSecond</externalName>
          <kind>11</kind>
          <help>_ML_TernaryAddSecond(parser, oper_2_string, ternary_id)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_ML_TokCleanUp</name>
          <externalName>_ML_TokCleanUp</externalName>
          <kind>11</kind>
          <help>_ML_TokCleanUp(tokenlist)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants>
        <constant>
          <name>ML_O_LEFTASSOC</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_O_RIGHTASSOC</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_UO_PREFIX</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_UO_POSTFIX</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_UNKNOWN</name>
          <value>-1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_VALUE</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_UNARY</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_BINARY</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_FUNCTION</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_VARIABLE</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_ARGSEP</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_LEFTP</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_RIGHTP</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_ASSIGN</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_EOL</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_TERNARY1</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_TERNARY2</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_TERNARY</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_COMMA</name>
          <value>13</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_EXPRTERMINATOR</name>
          <value>14</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_FUNCFLAT</name>
          <value>15</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_TT_ASSIGNFLAT</name>
          <value>16</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_VAL_REAL</name>
          <value>"R"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_VAL_STRING</name>
          <value>"S"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_VAL_ANY</name>
          <value>"A"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_VAL_UNDEFINED</name>
          <value>"U"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_CHAR</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_TOKENTYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_FUNCTION</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_VARIABLE</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_BINOPERATOR</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_UNOPERATOR</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_VALUE</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_ARGC</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_UNKNOWNTOKEN</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_PARENTHESIS</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_ASSIGN</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_ARGTYPE</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_CALC</name>
          <value>13</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_EXCEPT_TERNARY</name>
          <value>14</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LI_STR</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIVAR_READONLY</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIVAR_TYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIFUNC_ACTUAL</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIOP_PREC</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIOP_ASSOC</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOP_STR_P1</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIUOP_AFFIX</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOP_STR_P2</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIS_SCRIPT</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIS_RETTYPE</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIFS_ARGC</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIFS_ARGS</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIBOPS_LHSTYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIBOPS_RHSTYPE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIUOPS_ARGTYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOPS_LHSTYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOPS_RHSTYPE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOPS_MHSTYPE</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIAOPS_LHSTYPE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIAOPS_RHSTYPE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOK_TYPE</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOK_STR</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOK_POS</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOK_OP</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LITOK_ARGC</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_BINOPSTABLE</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_UNOPSTABLE</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_ASOPSTABLE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_TERNOPSTABLE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_TERNOPS2TABLE</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_FUNCTABLE</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_VARTABLE</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_FUNCSTR</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_VARMAP</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_ERRFLAGS</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_ERRPOS</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_ERRSTRING</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_RESOBJECT</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIP_OPSIGROOTS</name>
          <value>13</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIRO_CALCULATED</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIRO_ANSWER</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIRO_ALLANSWERS</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_LIRO_ALLANSWERSTYPE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_CTT_CONSTANT</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_CTT_VARIABLE</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>ML_CTT_ASSIGNABLE</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
      </constants>
    </file>
  </files>
</extension>
